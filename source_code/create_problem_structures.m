%% Save the cycle parameters as structure
% Simple script to organize information into an structure

% Thermodynamic input from a system-level analysis
thermodynamic_input = struct('fluid',       fluid,       ...
                             'mass_flow',   mass_flow,   ...
                             'h0_in',       h0_in,       ...
                             'p0_in',       p0_in,       ...
                             'p_out',       p_out);
                         
% Turbine design specifications                         
design_input = struct('n_stages',         n_stages,         ...
                      'loss_system',      loss_system,      ...
                      'loss_coefficient', loss_coefficient, ...
                      'obj_function',     obj_function,     ...
                      't_cl',             t_cl,             ...
                      'angle_in',         angle_in,         ...
                      'diffuser_model',   diffuser_model,   ...
                      'phi',              phi,              ...
                      'div',              div,              ...
                      'AR',               AR,               ...
                      'Cf',               Cf);
       
% Lower bounds for the degrees of freedom                 
lower_bounds = struct('w_s',       w_s_min,       ...
                      'd_s',       d_s_min,       ...
                      'vel_in',    vel_in_min,    ...
                      'vel_out',   vel_out_min,   ...
                      'ang_out',   ang_out_min,   ...
                      'r_Hc',      r_Hc_min,      ...
                      'r_sc',      r_sc_min,      ...
                      's_out',     s_out_min);

% Upper bounds for the degrees of freedom     
upper_bounds = struct('w_s',       w_s_max,       ...
                      'd_s',       d_s_max,       ...
                      'vel_in',    vel_in_max,    ...
                      'vel_out',   vel_out_max,   ...
                      'ang_out',   ang_out_max,   ...
                      'r_Hc',      r_Hc_max,      ...
                      'r_sc',      r_sc_max,      ...
                      's_out',     s_out_max);
                  

% Organize the previous structures in a compact way     
fixed_parameters = struct('thermodynamic_input', thermodynamic_input, ...
                          'design_input',        design_input,        ...
                          'lower_bounds',        lower_bounds,        ...
                          'upper_bounds',        upper_bounds,        ...
                          'constraints',         constraints,           ...
                          'results_path',        results_path,          ...
                          'project_name',        project_name,          ...
                          'choose_plots',        choose_plots);
                      
               
%% Create the optimization_problem structure
optimization_problem = struct('lb',        [], ...                         % Vector of lower bounds
                              'ub',        [], ...                         % Vector of upper bounds
                              'Aeq',       [], ...                         % Matrix for linear equality constraints
                              'beq',       [], ...                         % Vector for linear equality constraints
                              'Aineq',     [], ...                         % Matrix for linear inequality constraints
                              'bineq',     [], ...                         % Vector for linear inequality constraints
                              'nonlcon',   [], ...                         % Nonlinear constraints function
                              'objective', [], ...                         % Objective function
                              'x0',        [], ...                         % Initial guess for the degrees of freedom
                              'options',   [], ...                         % Optimization options structure
                              'solver',    'fmincon');

% Define the initial guess vector
x0_turb = [w_s,       ...
           d_s,       ...
           vel_in,    ...
           vel_out,   ...
           ang_out,   ...
           r_Hc,      ...
           r_sc,      ...
           s_out]';

optimization_problem.x0 = x0_turb;

% Define the vector of lower bounds
lb_turb = [w_s_min,       ...
           d_s_min,       ...
           vel_in_min,    ...
           vel_out_min,   ...
           ang_out_min,   ...
           r_Hc_min,      ...
           r_sc_min,      ...
           s_out_min]'; 

optimization_problem.lb = lb_turb;
                       
% Define the vector of upper bounds                  
ub_turb = [w_s_max,       ...
           d_s_max,       ...
           vel_in_max,    ...
           vel_out_max,   ...
           ang_out_max,   ...
           r_Hc_max,      ...
           r_sc_max,      ...
           s_out_max]';

optimization_problem.ub = ub_turb;
    

% Define the options using the optimoptions function
% Change the type of algorithm here
optimization_problem.options = optimoptions(@fmincon,                   ...
                       'Display', 'iter-detailed',                      ...
                       'Algorithm', algorithm,                          ...
                       'StepTolerance', step_tolerance,                 ...
                       'ConstraintTolerance', constraint_tolerance,     ...
                       'OptimalityTolerance', optimality_tolerance,     ...
                       'FunctionTolerance', function_tolerance,         ...
                       'MaxFunctionEvaluations', max_function_evals,    ...
                       'MaxIterations', max_iterations,                 ...
                       'FiniteDifferenceStepSize', sqrt(eps),           ...
                       'UseParallel', use_parallel,                     ...
                       'PlotFcn', {@optimplotfval,                      ...
                                   @optimplotconstrviolation,           ...
                                   @optimplotfirstorderopt,             ...
                                   @optimplotstepsize});
              

optimization_problem.options.OutputFcn = @(x,optimValues,state)save_current_solution(x,optimValues,state,fixed_parameters);
    



